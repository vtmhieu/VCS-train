//HOW TO CREATE NEW TABLE

CREATE TABLE movies(
    movies_id SERIAL PRIMARY KEY,
    movies_name VARCHAR(255) NOT NULL,
    movies_time TIMESTAMP NOT NULL
);


//CREATE A TABLE WITH FOREIGN KEY

CREATE TABLE tickets(
    tick_id SERIAL PRIMARY KEY,
    movies_id INT REFERENCES movies(movies_id),
    movies_time INT REFERENCES movies(movies_time)
);


//NUMERIC ? used for the moonetary or amounts storage where precision is required
NUMERIC(precision, scale) which, precision is the total number of digits
 scale = num of digits in tem of fractions

// CREATE A JUNCTION TABLE

CREATE TABLE customer(
    movies_id INT REFERENCES movies(movies_id),
    tick_id INT REFERENCES movies(tick_id),
    PRIMARY KEY ( movies_id, tick_id)
);


// ADD NEW COLUMN

ALTER TABLE movies
ADD COLUMN type VARCHAR(50) NOT NULL;

// CHANGE THE COLUMN DATA TYPE

ALTER TABLE movies
ALTER COLUMN type TYPE CHAR(3);


// DELETE DATA FROM TABLE

DROP TABLE movies;


//INSERT DATA INTO TABLE

INSERT INTO movies (movies_id, movies_name, movies_time)
VALUES ('1','Gone','12:30:00') ,('2','Bye','13:40:00');

//UPDATING DATA 

UPDATE movies 
SET movies_id = '3'
WHERE movies_id = '1';

//DELETE DATA FROM TABLE   

DELETE FROM movies 
WHERE movies_id = '1';

//SELECT QUERIES 

SELECT * FROM movies; = select all movies 

SELECT movies_id FROM movies;

SELECT movies_id, movies_name FROM movies;

//WHERE clauses 

SELECT * FROM movies  
WHERE movies_name = 'asdfd'; 

SELECT * FROM movies  
WHERE movies_name = 'asdfd'
AND movies_date = '12:30:00';

SELECT * FROM movies  
WHERE movies_name = 'asdfd'
OR movies_date = '12:30:00';

//LOGICAL OPERATORS 
SELECT * FROM movies
WHERE movies_id = > < => =< '  ';

//IN , NOT IN 

 SELECT * FROM movies
 WHERE movies_id IN ('1','2'); = print out all informations which has id of either 1 or 2


 SELECT * FROM movies
 WHERE movies_id NOT IN ('1','2'); = print out all informations which doesnt have id of either 1 or 2


 //LIKE
 SELECT * FROM movies
 WHERE movies_name LIKE 'P%'; = start with P and follow by many
                        'P_'; = start with P and follow by only one character
                        '%P%'
                        '%P'
                        '_P'
                        '_P_'

//BETWEEN

SELECT ... FROM... 
WHERE... BETWEEN... AND ...;

//ORDER BY 

SELECT...FROM... 
ORDER BY movies_name; from low to high

//LIMIT
is to limit the output 

SELECT * FROM movies 
ORDER BY movies_id
LIMIT 5 OFFSET 3;

->OFFSET = skip 3 first row

// FETCH

SELECT movies_id, movies_name FROM movies 
(OFFSET ... ROWS) -> skip ... rows first 
FETCH FIRST 10 ROW ONLY;

//DISTINCT

SELECT DISTINCT ... FROM... 
ODER BY...;

-> DISTINCT is print out the different name, not same name

// NULL

SELECT * FROM movies
WHERE movies_name IS NULL; -> print out all the row has null movies_name

SELECT * FROM movies 
WHERE movies_name IS NOT NULL
ORDER BY movies_name DESC;

// SETTING A COLUMN NAME ALIAS 

SELECT movies_name AS name FROM movies 
WHERE movies_name LIKE 'A%' 
ORDER BY name; 

//CONCATENATE 

SELECT 'string1' || ' ' || 'string2' AS new_string
-> print out column with name 'new_string' and data of 'string1 string2'

= SELECT CONCAT(movies_id,' ', movies_name) AS new_name FROM movies;
= SELECT CONCAT_WS(' ', movies_id, movies_name, movies_time) AS new_name FROM movies;

***AGGREGATE FUNCTIONS***

//COUNT

SELECT COUNT(movies_name) FROM movies; (print the total number of notnull values)

//SUM

SELECT SUM(movies_id) FROM movies; 
-> return 1 value; cannot use sum for VARCHAR  

//MAX MIN   

SELECT MAX(movies_id) FROM movies;

SELECT MIN(movies_id) FROM movies;

SELECT MIN(movies_time) FROM movies
WHERE movies_type =' ';

can be use for both number of text (VARCHAR) 

// AVERAGE

SELECT AVG(movies_length) FROM movies
WHERE age_certificate = '18';

//GROUPING DATA

SELECT movies_length, COUNT(movies_length) FROM movies
GROUP BY movies_length;

SELECT movies_length, AVG(movies_length) FROM movies; -> ERROR since you have to create a group by clause which contains all the columns that you have an aggregated over

SELECT movies_length, age_certificate, COUNT(movies_length) FROM movies
GROUP BY movies_length, age_certificate;

// HAVING clauses

SELECT movies_length, COUNT(movies_lang) FROM movies
GROUP BY movies_lang
HAVING COUNT(movies_lang) >1;
 
-> filterd out all the count =1

SELECT movies_length, COUNT(movies_lang) FROM movies
WHERE COUNT(movies_lang) >1
GROUP BY movies_lang;

-> can't use this because WHERE clauses acts on actual values in column, not on aggregated values from a column.

//MATHEMATICAL FUNCTIONS

addition +
subtraction -
division /
multiplication *
modulus %

SELECT movies_id, (movies_length + movies_id) AS time FROM movies;



***DATABASE RELATIONSHIP***

//ONE TO ONE RELATIONSHIP

primary key values of table 1 can appear a maximum of once in the foreign key column in table 2.

//ONE TO MANY RELATIONSHIP

primary key values of table 1 can appear multiple times in the foreign key column.
ex: 1 director can have many films

//MANY TO MANY RELATIONSHIP

where tow tables can have many instances of each other then we can't relate these two tables just using primary keys and foreign keys
ex: 2 authors writes many books

we need to use third table, which is known as a junction table 
ex: 2 tables movies and actors, both dont contain foregin key include other id 
use third table movies_actors to save the data of movie_id and actor_id

each table has one to many relationship with junction table.


***JOINING TABLE*** 

jooin queries allow us to select data from multiple tables.
There needs to be a related column of data berween the tables.
These columns are usuallu Primary Key and Foreign Key colums.

Kinds of joins: Inner Joins, Left Joins, Right Joins, Full Joins.

// INNER JOINS 
 Will only return rows f data with matching values in both tables.

 ex: table 1
 ID     column
 1      LA 
 2      LB
 3      LC 
 4      LB
 5      LE
table 2 ... -> print out only data of both tables which have same ID .


ex1: we have 2 tables movies with directors

SELECT directors.director_id, directors.first_name, directors.last_name, movies.movie_name 
FROM directors
INNER JOIN movies ON directors.director_id = movies.director_id;


Ex2:
using USING not ON only when two table have the same name 

SELECT mo.movie_name, mr.domestic_takings FROM movies mo 
JOIN movie_revenues mr USING (movie_id);

//LEFT JOIN 
Will return all the rows if data in the left table(table 1) and only matching rows of data in the right table(table2)


ex1:
SELECT directors.director_id, directors.first_name, directors.last_name, movies.movie_name 
FROM directors
LEFT JOIN movies ON directors.director_id = movies.director_id;



//RIGHT JOIN
Will return all the rows of data in the right table( table 2) and only matching rows of data in the laft table(table1)


ex: 
SELECT directors.director_id, directors.first_name, directors.last_name, movies.movie_name 
FROM directors
RIGHT JOIN movies ON directors.director_id = movies.director_id;


//FULL JOIN
Will only return all rows of data in both tables .

ex: 
SELECT directors.director_id, directors.first_name, directors.last_name, movies.movie_name 
FROM directors
FULL JOIN movies ON directors.director_id = movies.director_id;


//JOINING MORE THAN TWO TABLES 

SELECT t1.col, t2.col, t3.col FROM table1 t1
JOIN table2 t2 ON t1.col = t2.col
JOIN table3 t3 ON t3.col = t2.col;

ex: 
SELECT d.first_name, d.last_name, mo.movie_name, mr.international_takings, mr.domestic_takings
FROM directors d 
JOIN moveis mo ON d.director_id = mo.director_id
JOIN movie_revenues mr ON mr.movie_id = mo.movie_id;


//UNION

SELECT first_name, last_name FROM directors
WHERE nationality = 'American'
UNION 
SELECT first_name, last_name FROM actors
WHERE gender = 'F';

//UNION ALL 

//INTERSECT 

SELECT first_name FROM directors
INTERSECT
SELECT first_name FROM actors;


//EXCEPT

SELECT first_name FROM directors
EXCEPT
SELECT first_name FROM actors;


***SUBQUERIES***

Subqueries can be nested inside a select, insert, update or delete query.
Can be used after FROM or WHERE 

There are two types of subquery: Uncorrelated and Correlated Subqueries.

**Uncorrelated Subqueries: The inner query could e excuted independently form the outer query.

ex1:
SELECT movie_name, movie_length FROM movies 
WHERE movie_length >
(SELECT AV(movie_length) FROM movies);

ex2:
SELECT first_name, last_name, date_of_birth FROM directors 
WHERE date_of_birth >
(SELECT date_of_birth FROM actors
WHERE first_name ='Tom'
AND last_name = 'Cruise');


ex3:
SELECT mo.movie_id, mo.movie_name, d.first_name, d.last_name FROM movies mo 
JOIN directors d ON mo.director_id = d.director_id
WHERE mo.movie_id IN 
(SELECT movie_id FROM movie_revenues 
WHERE international_takings > domestic_takings);



**Correlated Subqueries: the Inner query dreferences a table form the outer query. SO the inner query cant be executed independently from the outer query.

SELECT d1.first_name, d1.last_name, d1.date_of_birth 
FROM directors d1 
WHERE d1.date_of_birth =
(SELECT MIN(date_of_birth) FROM directors d2
WHERE d2.nationality = d1.nationality);

if there is only 
SELECT MIN(date_of_birth) FROM directors d2
WHERE d2.nationality = d1.nationality
then it cant be compiled since there is no entry for table 1. (no FROM)


***STRING FUNCTION***

//CLONING A DATABASE(COPY)
1. create a new database as usual
2. go to Definition, choose the template of which database you want to copy 

// UPPER AND LOWER FUNCTION

SELECT first_name, UPPER(last_name) AS last_name FROM actors;

SELECT first_name, LOWER(last_name) AS last_name FROM actors;

//INITCAP STRING FUNCTION 

SELECT INITCAP(movie_name) FROM movies;

auto write -> Auto Write 

//LEFT AND RIGHT FUNCTION 

SELECT LEFT('string',4);
-> stri
-4 -> st 
-5 -> s
SELECT RIGHT('example',3);
-> ple
-3->mple
2-> le 


//REVERSE FUNCTION 
SELECT REVERSE('reverse');
->esrever

//SUBSTRING FUNCTION 

SELECT SUBSTRING('long string',2,6);
-> ong st 

//REPLACE FUNCTION 

SELECT REPLACE('a cat plays with another cat', 'cat', 'dog');
-> a dog plays with another dog

//SPLIT_PART FUNCTION 

SELECT SPLIT_PART('first_name.last_name@gmail.com','@',1);
1-> part after split 
-> first_name.last_name 
2-> gmail.com 


//USING CASTING TO APPLY STRING FUNCTIONS TO NON STRING DATA TYPES 


SELECT date_of_birth::TEXT FROM directors;
SELECT SPLIT_PART(date_of_birth::TEXT, '_',1) FROM directors;

-> 1965-04-01 -> 1965




//JSON and JSONB datatype 

1st create table 

CREATE TABLE books(
    id serial, 
    bookinfo jsonb 
)

2nd insert data into books

INSERT INTO books(bookinfo) 
VALUES ('{"title":"John", "author":["Pan","Minh","Chi"],"publisher":"Nha xuat ban Kim Dong","date":"2017"}');

3rd select data from books 

SELECT bookinfo->'author' FROM books; // -> return ["Pan","Minh","Chi"]

// CREATE JSON FORM TABLE

SELECT jsonb_build_object(
    'id', b.id,
    'title', b.title,
    'author',b.author,
    'publisher',b.publisher,
    'date',b.date
)
FROM books AS b; //denote table books as b 

-> JSON format {"id":"1","title":"John", "author":["Pan","Minh","Chi"],"publisher":"Nha xuat ban Kim Dong","date":"2017"}

// how to add array of keywords