//HOW TO CREATE NEW TABLE

CREATE TABLE movies(
    movies_id SERIAL PRIMARY KEY,
    movies_name VARCHAR(255) NOT NULL,
    movies_time TIMESTAMP NOT NULL
);


//CREATE A TABLE WITH FOREIGN KEY

CREATE TABLE tickets(
    tick_id SERIAL PRIMARY KEY,
    movies_id INT REFERENCES movies(movies_id),
    movies_time INT REFERENCES movies(movies_time)
);


//NUMERIC ? used for the moonetary or amounts storage where precision is required
NUMERIC(precision, scale) which, precision is the total number of digits
 scale = num of digits in tem of fractions

// CREATE A JUNCTION TABLE

CREATE TABLE customer(
    movies_id INT REFERENCES movies(movies_id),
    tick_id INT REFERENCES movies(tick_id),
    PRIMARY KEY ( movies_id, tick_id)
);


// ADD NEW COLUMN

ALTER TABLE movies
ADD COLUMN type VARCHAR(50) NOT NULL;

// CHANGE THE COLUMN DATA TYPE

ALTER TABLE movies
ALTER COLUMN type TYPE CHAR(3);


// DELETE DATA FROM TABLE

DROP TABLE movies;


//INSERT DATA INTO TABLE

INSERT INTO movies (movies_id, movies_name, movies_time)
VALUES ('1','Gone','12:30:00') ,('2','Bye','13:40:00');

//UPDATING DATA 

UPDATE movies 
SET movies_id = '3'
WHERE movies_id = '1';

//DELETE DATA FROM TABLE   

DELETE FROM movies 
WHERE movies_id = '1';

//SELECT QUERIES 

SELECT * FROM movies; = select all movies 

SELECT movies_id FROM movies;

SELECT movies_id, movies_name FROM movies;

//WHERE clauses 

SELECT * FROM movies  
WHERE movies_name = 'asdfd'; 

SELECT * FROM movies  
WHERE movies_name = 'asdfd'
AND movies_date = '12:30:00';

SELECT * FROM movies  
WHERE movies_name = 'asdfd'
OR movies_date = '12:30:00';

//LOGICAL OPERATORS 
SELECT * FROM movies
WHERE movies_id = > < => =< '  ';

//IN , NOT IN 

 SELECT * FROM movies
 WHERE movies_id IN ('1','2'); = print out all informations which has id of either 1 or 2


 SELECT * FROM movies
 WHERE movies_id NOT IN ('1','2'); = print out all informations which doesnt have id of either 1 or 2


 //LIKE
 SELECT * FROM movies
 WHERE movies_name LIKE 'P%'; = start with P and follow by many
                        'P_'; = start with P and follow by only one character
                        '%P%'
                        '%P'
                        '_P'
                        '_P_'

//BETWEEN

SELECT ... FROM... 
WHERE... BETWEEN... AND ...;

//ORDER BY 

SELECT...FROM... 
ORDER BY movies_name; from low to high

//LIMIT
is to limit the output 

SELECT * FROM movies 
ORDER BY movies_id
LIMIT 5 OFFSET 3;

->OFFSET = skip 3 first row

// FETCH

SELECT movies_id, movies_name FROM movies 
(OFFSET ... ROWS) -> skip ... rows first 
FETCH FIRST 10 ROW ONLY;

//DISTINCT

SELECT DISTINCT ... FROM... 
ODER BY...;

-> DISTINCT is print out the different name, not same name

// NULL

SELECT * FROM movies
WHERE movies_name IS NULL; -> print out all the row has null movies_name

SELECT * FROM movies 
WHERE movies_name IS NOT NULL
ORDER BY movies_name DESC;

// SETTING A COLUMN NAME ALIAS 

SELECT movies_name AS name FROM movies 
WHERE movies_name LIKE 'A%' 
ORDER BY name; 

//CONCATENATE 

SELECT 'string1' || ' ' || 'string2' AS new_string
-> print out column with name 'new_string' and data of 'string1 string2'

= SELECT CONCAT(movies_id,' ', movies_name) AS new_name FROM movies;
= SELECT CONCAT_WS(' ', movies_id, movies_name, movies_time) AS new_name FROM movies;

***AGGREGATE FUNCTIONS***

//COUNT

SELECT COUNT(movies_name) FROM movies; (print the total number of notnull values)

//SUM

SELECT SUM(movies_id) FROM movies; 
-> return 1 value; cannot use sum for VARCHAR  

//MAX MIN   

SELECT MAX(movies_id) FROM movies;

SELECT MIN(movies_id) FROM movies;

SELECT MIN(movies_time) FROM movies
WHERE movies_type =' ';

can be use for both number of text (VARCHAR) 

// AVERAGE

SELECT AVG(movies_length) FROM movies
WHERE age_certificate = '18';

//GROUPING DATA

SELECT movies_length, COUNT(movies_length) FROM movies
GROUP BY movies_length;

SELECT movies_length, AVG(movies_length) FROM movies; -> ERROR since you have to create a group by clause which contains all the columns that you have an aggregated over

SELECT movies_length, age_certificate, COUNT(movies_length) FROM movies
GROUP BY movies_length, age_certificate;

// HAVING clauses

SELECT movies_length, COUNT(movies_lang) FROM movies
GROUP BY movies_lang
HAVING COUNT(movies_lang) >1;
 
-> filterd out all the count =1

SELECT movies_length, COUNT(movies_lang) FROM movies
WHERE COUNT(movies_lang) >1
GROUP BY movies_lang;

-> can't use this because WHERE clauses acts on actual values in column, not on aggregated values from a column.

//MATHEMATICAL FUNCTIONS

addition +
subtraction -
division /
multiplication *
modulus %

SELECT movies_id, (movies_length + movies_id) AS time FROM movies;

